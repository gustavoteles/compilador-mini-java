/* Generated By:JavaCC: Do not edit this line. GrammarConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQUALS = 5;
  /** RegularExpression Id. */
  int NEGATION = 6;
  /** RegularExpression Id. */
  int LBRACE = 7;
  /** RegularExpression Id. */
  int RBRACE = 8;
  /** RegularExpression Id. */
  int P_OPEN = 9;
  /** RegularExpression Id. */
  int P_CLOSE = 10;
  /** RegularExpression Id. */
  int B_OPEN = 11;
  /** RegularExpression Id. */
  int B_CLOSE = 12;
  /** RegularExpression Id. */
  int POINT = 13;
  /** RegularExpression Id. */
  int COMMA = 14;
  /** RegularExpression Id. */
  int CLOSER = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int EXTENDS = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int CLASS = 21;
  /** RegularExpression Id. */
  int PUBLIC = 22;
  /** RegularExpression Id. */
  int STATIC = 23;
  /** RegularExpression Id. */
  int VOID = 24;
  /** RegularExpression Id. */
  int MAIN = 25;
  /** RegularExpression Id. */
  int STRING = 26;
  /** RegularExpression Id. */
  int INT = 27;
  /** RegularExpression Id. */
  int ARRAY_MODIFIER = 28;
  /** RegularExpression Id. */
  int LENGTH = 29;
  /** RegularExpression Id. */
  int BOOLEAN = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int FALSE = 32;
  /** RegularExpression Id. */
  int THIS = 33;
  /** RegularExpression Id. */
  int NEW = 34;
  /** RegularExpression Id. */
  int END = 35;
  /** RegularExpression Id. */
  int OP = 36;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int ID = 39;
  /** RegularExpression Id. */
  int LIT = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"=\"",
    "\"!\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"extends\"",
    "\"return\"",
    "\"class\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"String\"",
    "\"int\"",
    "\"[]\"",
    "\"length\"",
    "\"boolean\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"$\"",
    "<OP>",
    "<INTEGER_LITERAL>",
    "<DIGIT>",
    "<ID>",
    "<LIT>",
    "\"System.out.println\"",
  };

}
