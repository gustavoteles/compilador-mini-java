/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(MiniJavaParser)package parser;
import syntaxtree.*;

public class MiniJavaParser {
}PARSER_END(MiniJavaParser)
SKIP :{  " "| "\r"| "\t"| "\n"}

/* Falta definir comentários de linha simples e multiplas linhas */

TOKEN : 
{
	< EQUALS : "="> |
	< NEGATION : "!">|
	< LBRACE : "{"> |
	< RBRACE : "}"> |
	< P_OPEN : "("> |
	< P_CLOSE : ")"> |
	< B_OPEN : "["> |
	< B_CLOSE : "]"> |
	< POINT : "."> |
	< COMMA: ","> |
	< CLOSER : ";">
}

TOKEN :
{
	< IF : "if"> |
	< ELSE : "else"> |
	< WHILE : "while"> |
	< EXTENDS : "extends"> |
	< RETURN : "return"> |
	< CLASS: "class"> |
	< PUBLIC : "public"> |
	< STATIC : "static"> |	
	< VOID : "void"> |
	< MAIN : "main"> |
	< STRING : "String"> |
	< INT : "int"> |
	< ARRAY_MODIFIER : "[]"> |
	< LENGTH : "length"> |
	< BOOLEAN: "boolean"> |
	< TRUE:"true"> |
	< FALSE: "false"> |
	< THIS: "this"> |
	< NEW : "new"> |
	< END : "$">|
	< AND: "&&">|
	< LESS_THAN: "< ">|
	< PLUS: "+">|
	< MINUS: "-">|
	< TIMES: "*">
}

TOKEN :
{
  < INTEGER_LITERAL : (< DIGIT >)+ > |
  < #DIGIT : [ "0"-"9" ] >
}
TOKEN:
{
  < ID : (< LIT >)(< LIT >|< DIGIT >)* > |
  < #LIT : ["a"-"z"]|["A"-"Z"]|"_">
}

Program Program() :
{
  MainClass mainClass;
  ClassDecl classDecl;
  ClassDeclList cdList = new ClassDeclList();
}
{
  mainClass = MainClass() ( classDecl = ClassDecl() { cdList.addElement(classDecl); } )* <END>
  { return new Program(mainClass, cdList); }
}

MainClass MainClass() :
{
  Token idClass, idMainArgs;
  Statement stm;
}
{
  "class" idClass = <ID> "{" "public" "static" "void" "main" "(" "String" "[]" idMainArgs = <ID> ")" "{" stm = Statement() "}" "}"
  { return new MainClass(new Identifier(idClass.image), new Identifier(idMainArgs.image), stm); }
}

ClassDecl ClassDecl() :
{
Token id, idSuper;
VarDeclList varList = new VarDeclList();
MethodDeclList methodList = new MethodDeclList();
VarDecl vd;
MethodDecl mc;
}
{
  LOOKAHEAD(3) "class" id = <ID> "{" ( vd = VarDecl()  {varList.addElement(vd);} )*( mc = MethodDecl() { methodList.addElement(mc); } )* "}"
  { return new ClassDeclSimple(new Identifier(id.image), varList, methodList); }
| "class" id = <ID> "extends" idSuper = <ID> "{" ( vd = VarDecl() { varList.addElement(vd); } )* ( mc = MethodDecl() { methodList.addElement(mc); } )* "}"
  { return new ClassDeclExtends(new Identifier(id.image), new Identifier(idSuper.image), varList, methodList); }
}

VarDecl VarDecl() :
{
Token id;
Type type;
}
{
  type = Type() id = <ID> ";"
  { return new VarDecl(type, new Identifier(id.image)); }
}

MethodDecl MethodDecl() :
{
  Type type;
  Token id;
  FormalList formalList;
  VarDecl vd;
  Statement stm; 
  VarDeclList varList = new VarDeclList();
  StatementList stmList = new StatementList();
  Exp returnExp;
}
{
  "public" type = Type() id = <ID> "(" formalList = FormalList() ")" "{" ( LOOKAHEAD(2) vd = VarDecl()  { varList.addElement(vd);} )* ( stm = Statement() {stmList.addElement(stm);})* "return" returnExp = Exp() ";" "}"
  { return new MethodDecl(type, new Identifier(id.image), formalList, varList, stmList, returnExp); }
}


FormalList FormalList() :
{
  Type type;
  Token id;
  Formal fr;
  FormalList fl = new FormalList();
}
{
  ( type = Type() id = <ID> { fl.addElement(new Formal(type,new Identifier(id.image)));} ( fr = FormalRest(){ fl.addElement(fr);} )* )?
  { return fl;} 
}

Formal FormalRest() :
{
Type type;
Token id;
}
{
  "," type = Type() id = <ID>
  { return new Formal(type, new Identifier(id.image));}
}

Type Type() :
{
  Token id;
}
{
LOOKAHEAD(2)  "int" "[]" { return new IntArrayType();}
|
  "int" { return new IntegerType();}
|
  "boolean" { return new BooleanType();}
|  
  id = <ID> { return new IdentifierType(id.image);}
}

Statement Statement() :
{
  	Token id;
	Statement stm1,stm2;
	StatementList stmL = new StatementList();
	Exp exp,exp2;
}
{
  "{" ( stm1 = Statement(){ stmL.addElement(stm1);} )* "}" { return new Block(stmL);}
|
  "if" "(" exp = Exp() ")" stm1 = Statement() "else" stm2 = Statement() { return new If(exp,stm1,stm2);}
|
  "while" "(" exp = Exp() ")" stm1 = Statement() { return new While(exp,stm1);}
|
  "System.out.println" "(" exp = Exp() ")" ";" { return new Print(exp);}
|
LOOKAHEAD(2)  id = <ID> "=" exp = Exp() ";" { return new Assign(new Identifier(id.image),exp);}
|   id = <ID> "[" exp = Exp() "]" "=" exp2 = Exp() ";" { return new ArrayAssign(new Identifier(id.image),exp,exp2);}
}

Exp Exp0(Exp expAux) :
{
	Exp exp;
	Token id;
	ExpList expL = new ExpList();
}
{
  < PLUS > exp = Exp(){return new Plus(expAux,exp);}
|
  < MINUS > exp = Exp(){return new Minus(expAux,exp);}
|
  < TIMES > exp = Exp(){return new Times(expAux,exp);}
|
  < AND > exp = Exp(){return new And(expAux,exp);}
|
  < LESS_THAN > exp = Exp(){return new LessThan(expAux,exp);}
|
  "[" exp = Exp() "]" {return new ArrayLookup(expAux,exp);}
|
LOOKAHEAD(2)  "." "length" {return new ArrayLength(expAux);}
|
  "." id = < ID > "(" expL = ExpList() ")" {return new Call(expAux,new Identifier(id.image),expL);}
}
Exp Exp() :
{
  Exp exp,exp2;
  Token il,id;
}
{ 
(  il = <INTEGER_LITERAL> {exp = new IntegerLiteral(Integer.parseInt(il.image));} [ LOOKAHEAD(2) exp = Exp0(exp) ]
|
  "true" {exp = new True();}[ LOOKAHEAD(2) exp = Exp0(exp) ]
|
  "false" {exp = new False();} [ LOOKAHEAD(2) exp = Exp0(exp) ]
|
  id = <ID> {exp = new IdentifierExp(id.image);} [ LOOKAHEAD(2) exp = Exp0(exp) ] [ LOOKAHEAD(2) exp = Exp0(exp) ]
|
  "this" {exp = new This();}[ LOOKAHEAD(2) exp = Exp0(exp) ]
|
LOOKAHEAD(2)  "new" "int" "[" exp2 = Exp() "]" {exp = new NewArray(exp2);}[ LOOKAHEAD(2) exp = Exp0(exp) ]
|
 "new" id = <ID>  "("")" {exp = new NewObject(new Identifier(id.image));} [ LOOKAHEAD(2) exp = Exp0(exp) ]
|
 "!" exp2 = Exp() {exp = new Not(exp2);} [ LOOKAHEAD(2) exp = Exp0(exp) ]
|
 "(" exp = Exp() ")" [ LOOKAHEAD(2) exp = Exp0(exp) ]
) {return exp;}
}

ExpList ExpList() :
{
  Exp exp;
  ExpList expL= new ExpList();
}
{
  (( exp = Exp(){expL.addElement(exp);}( exp = ExpRest(){expL.addElement(exp);})* )?)
  { return expL;}
}

Exp ExpRest() :
{
  Exp  exp;
}
{
  "," exp = Exp()  {return exp;}
}
