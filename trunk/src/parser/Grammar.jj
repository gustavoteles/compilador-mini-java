/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg1)package parser;

public class eg1{  public static void main(String args []) throws ParseException  {    eg1 parser = new eg1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Digite:");      try      {        switch (eg1.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        eg1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }
      break;    }  }}PARSER_END(eg1)SKIP :{  " "| "\r"| "\t"| "\n"}

/* Falta definir comentários de linha simples e multiplas linhas */

TOKEN : 
{
	< EQUALS : "="> |
	< NEGATION : "!">|
	< LBRACE : "{"> |
	< RBRACE : "}"> |
	< P_OPEN : "("> |
	< P_CLOSE : ")"> |
	< B_OPEN : "["> |
	< B_CLOSE : "]"> |
	< POINT : "."> |
	< COMMA: ","> |
	< CLOSER : ";">
}

TOKEN :
{
	< IF : "if"> |
	< ELSE : "else"> |
	< WHILE : "while"> |
	< EXTENDS : "extends"> |
	< RETURN : "return"> |
	< CLASS: "class"> |
	< PUBLIC : "public"> |
	< STATIC : "static"> |	
	< VOID : "void"> |
	< MAIN : "main"> |
	< STRING : "String"> |
	< INT : "int"> |
	< ARRAY_MODIFIER : "[]"> |
	< LENGTH : "length"> |
	< BOOLEAN: "boolean"> |
	< TRUE:"true"> |
	< FALSE: "false"> |
	< THIS: "this"> |
	< NEW : "new"> |
	< END : "$"> 
}

TOKEN :
{< OP : "&&"|"< "|"+"|"-"|"/"|"*" >
}
TOKEN :
{
  < INTEGER_LITERAL : (< DIGIT >)+ > |
  < #DIGIT : [ "0"-"9" ] >
}
TOKEN:
{
  < ID : (< LIT >)(< LIT >|< DIGIT >)* > |
  < #LIT : ["a"-"z"]|["A"-"Z"]|"_">
}int one_line() :{}{  Program()  {    return 0;  }|  {    return 1;  }}

void Program() :
{}
{
  MainClass() ( ClassDecl() )* < END >
}

void MainClass() :
{}
{
  < CLASS > <ID> "{" "public" "static" "void" "main" "(" "String" "[]" <ID> ")" "{" Statement() "}" "}"
}


void ClassDecl() :
{}
{
  LOOKAHEAD(3) "class" <ID> "{" ( VarDecl() )* ( MethodDecl() )* "}"
  |  "class" <ID> "extends" <ID> "{" ( VarDecl() )* ( MethodDecl() )* "}"
}

void VarDecl() :
{}
{
  Type() <ID> ";"
}

void MethodDecl() :
{}
{
  "public" Type() <ID> "(" FormalList() ")" "{" ( LOOKAHEAD(2) VarDecl() )* ( Statement() )* "return" Exp() ";" "}"
}

void FormalList() :
{}
{
  ( Type() <ID> ( FormalRest() )* )?

}

void FormalRest() :
{}
{
  "," Type() <ID>
}

void Type() :
{}
{
LOOKAHEAD(2)  "int" "[]"
|
  "int"
|
  "boolean"
|  
  <ID>
}

void Statement() :
{}
{
  "{" ( Statement() )* "}"
|
  "if" "(" Exp() ")" Statement() "else" Statement()
|
  "while" "(" Exp() ")" Statement()
|
  "System.out.println" "(" Exp() ")" ";"
|
LOOKAHEAD(2)  <ID> "=" Exp() ";"
|   <ID> "[" Exp() "]" "=" Exp() ";"
}

void Exp0() :
{}
{
  < OP > Exp()
|
  "[" Exp() "]"
|
LOOKAHEAD(2)  "." "length"
|
  "." < ID > "(" ExpList() ")"
}
void Exp() :
{}
{ 
  <INTEGER_LITERAL> [ LOOKAHEAD(2) Exp0() ]
|
  "true" [ LOOKAHEAD(2) Exp0() ]
|
  "false" [ LOOKAHEAD(2) Exp0() ]
|
  <ID> [ LOOKAHEAD(2) Exp0()]
|
  "this" [ LOOKAHEAD(2) Exp0() ]
|
LOOKAHEAD(2)  "new" "int" "[" Exp() "]" [ LOOKAHEAD(2) Exp0() ]
|
 "new" <ID> "("")" [ LOOKAHEAD(2) Exp0() ]
|
 "!" Exp() [ LOOKAHEAD(2) Exp0() ]
|
 "(" Exp() ")" [ LOOKAHEAD(2) Exp0() ]
}

void ExpList() :
{}
{
  ( Exp() ( ExpRest() )* )?
}

void ExpRest() :
{}
{
  "," Exp()
}
