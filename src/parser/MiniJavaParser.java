/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package parser;
import syntaxtree.*;

public class MiniJavaParser implements MiniJavaParserConstants {

  static final public Program Program() throws ParseException {
  MainClass mainClass;
  ClassDecl classDecl;
  ClassDeclList cdList = new ClassDeclList();
    mainClass = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      classDecl = ClassDecl();
                                                      cdList.addElement(classDecl);
    }
    jj_consume_token(END);
    {if (true) return new Program(mainClass, cdList);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
  Token idClass, idMainArgs;
  Statement stm;
    jj_consume_token(CLASS);
    idClass = jj_consume_token(ID);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(P_OPEN);
    jj_consume_token(STRING);
    jj_consume_token(ARRAY_MODIFIER);
    idMainArgs = jj_consume_token(ID);
    jj_consume_token(P_CLOSE);
    jj_consume_token(LBRACE);
    stm = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(new Identifier(idClass.image), new Identifier(idMainArgs.image), stm);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
Token id, idSuper;
VarDeclList varList = new VarDeclList();
MethodDeclList methodList = new MethodDeclList();
VarDecl vd;
MethodDecl mc;
    if (jj_2_1(3)) {
      jj_consume_token(CLASS);
      id = jj_consume_token(ID);
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case ID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        vd = VarDecl();
   varList.addElement(vd);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        mc = MethodDecl();
                                                    methodList.addElement(mc);
      }
      jj_consume_token(RBRACE);
    {if (true) return new ClassDeclSimple(new Identifier(id.image), varList, methodList);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        id = jj_consume_token(ID);
        jj_consume_token(EXTENDS);
        idSuper = jj_consume_token(ID);
        jj_consume_token(LBRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case BOOLEAN:
          case ID:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          vd = VarDecl();
                                                                    varList.addElement(vd);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_5;
          }
          mc = MethodDecl();
                                                                                                                       methodList.addElement(mc);
        }
        jj_consume_token(RBRACE);
    {if (true) return new ClassDeclExtends(new Identifier(id.image), new Identifier(idSuper.image), varList, methodList);}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
Token id;
Type type;
    type = Type();
    id = jj_consume_token(ID);
    jj_consume_token(CLOSER);
    {if (true) return new VarDecl(type, new Identifier(id.image));}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
  Type type;
  Token id;
  FormalList formalList;
  VarDecl vd;
  Statement stm;
  VarDeclList varList = new VarDeclList();
  StatementList stmList = new StatementList();
  Exp returnExp;
    jj_consume_token(PUBLIC);
    type = Type();
    id = jj_consume_token(ID);
    jj_consume_token(P_OPEN);
    formalList = FormalList();
    jj_consume_token(P_CLOSE);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      vd = VarDecl();
    varList.addElement(vd);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case IF:
      case WHILE:
      case ID:
      case 45:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      stm = Statement();
                                                     stmList.addElement(stm);
    }
    jj_consume_token(RETURN);
    returnExp = Exp();
    jj_consume_token(CLOSER);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(type, new Identifier(id.image), formalList, varList, stmList, returnExp);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
  Type type;
  Token id;
  Formal fr;
  FormalList fl = new FormalList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      type = Type();
      id = jj_consume_token(ID);
                              fl.addElement(new Formal(type,new Identifier(id.image)));
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        fr = FormalRest();
                                                                                                              fl.addElement(fr);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Formal FormalRest() throws ParseException {
Type type;
Token id;
    jj_consume_token(COMMA);
    type = Type();
    id = jj_consume_token(ID);
    {if (true) return new Formal(type, new Identifier(id.image));}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
  Token id;
    if (jj_2_3(2)) {
      jj_consume_token(INT);
      jj_consume_token(ARRAY_MODIFIER);
                           {if (true) return new IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
          {if (true) return new IntegerType();}
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
              {if (true) return new BooleanType();}
        break;
      case ID:
        id = jj_consume_token(ID);
              {if (true) return new IdentifierType(id.image);}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
        Token id;
        Statement stm1,stm2;
        StatementList stmL = new StatementList();
        Exp exp,exp2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case ID:
        case 45:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        stm1 = Statement();
                            stmL.addElement(stm1);
      }
      jj_consume_token(RBRACE);
                                                             {if (true) return new Block(stmL);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(P_OPEN);
      exp = Exp();
      jj_consume_token(P_CLOSE);
      stm1 = Statement();
      jj_consume_token(ELSE);
      stm2 = Statement();
                                                                          {if (true) return new If(exp,stm1,stm2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(P_OPEN);
      exp = Exp();
      jj_consume_token(P_CLOSE);
      stm1 = Statement();
                                                   {if (true) return new While(exp,stm1);}
      break;
    case 45:
      jj_consume_token(45);
      jj_consume_token(P_OPEN);
      exp = Exp();
      jj_consume_token(P_CLOSE);
      jj_consume_token(CLOSER);
                                                 {if (true) return new Print(exp);}
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        id = jj_consume_token(ID);
        jj_consume_token(EQUALS);
        exp = Exp();
        jj_consume_token(CLOSER);
                                              {if (true) return new Assign(new Identifier(id.image),exp);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          id = jj_consume_token(ID);
          jj_consume_token(B_OPEN);
          exp = Exp();
          jj_consume_token(B_CLOSE);
          jj_consume_token(EQUALS);
          exp2 = Exp();
          jj_consume_token(CLOSER);
                                                         {if (true) return new ArrayAssign(new Identifier(id.image),exp,exp2);}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp0(Exp expAux) throws ParseException {
        Exp exp;
        Token id;
        ExpList expL = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      exp = Exp();
                       {if (true) return new Plus(expAux,exp);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      exp = Exp();
                        {if (true) return new Minus(expAux,exp);}
      break;
    case TIMES:
      jj_consume_token(TIMES);
      exp = Exp();
                        {if (true) return new Times(expAux,exp);}
      break;
    case AND:
      jj_consume_token(AND);
      exp = Exp();
                      {if (true) return new And(expAux,exp);}
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      exp = Exp();
                            {if (true) return new LessThan(expAux,exp);}
      break;
    case B_OPEN:
      jj_consume_token(B_OPEN);
      exp = Exp();
      jj_consume_token(B_CLOSE);
                       {if (true) return new ArrayLookup(expAux,exp);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(POINT);
        jj_consume_token(LENGTH);
                            {if (true) return new ArrayLength(expAux);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINT:
          jj_consume_token(POINT);
          id = jj_consume_token(ID);
          jj_consume_token(P_OPEN);
          expL = ExpList();
          jj_consume_token(P_CLOSE);
                                            {if (true) return new Call(expAux,new Identifier(id.image),expL);}
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
  Exp exp,exp2;
  Token il,id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      il = jj_consume_token(INTEGER_LITERAL);
                          exp = new IntegerLiteral(Integer.parseInt(il.image));
      if (jj_2_6(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
          exp = new True();
      if (jj_2_7(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      break;
    case FALSE:
      jj_consume_token(FALSE);
           exp = new False();
      if (jj_2_8(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      break;
    case ID:
      id = jj_consume_token(ID);
             exp = new IdentifierExp(id.image);
      if (jj_2_9(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      if (jj_2_10(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      break;
    case THIS:
      jj_consume_token(THIS);
          exp = new This();
      if (jj_2_11(2)) {
        exp = Exp0(exp);
      } else {
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_16(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(B_OPEN);
        exp2 = Exp();
        jj_consume_token(B_CLOSE);
                                                exp = new NewArray(exp2);
        if (jj_2_12(2)) {
          exp = Exp0(exp);
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id = jj_consume_token(ID);
          jj_consume_token(P_OPEN);
          jj_consume_token(P_CLOSE);
                          exp = new NewObject(new Identifier(id.image));
          if (jj_2_13(2)) {
            exp = Exp0(exp);
          } else {
            ;
          }
          break;
        case NEGATION:
          jj_consume_token(NEGATION);
          exp2 = Exp();
                   exp = new Not(exp2);
          if (jj_2_14(2)) {
            exp = Exp0(exp);
          } else {
            ;
          }
          break;
        case P_OPEN:
          jj_consume_token(P_OPEN);
          exp = Exp();
          jj_consume_token(P_CLOSE);
          if (jj_2_15(2)) {
            exp = Exp0(exp);
          } else {
            ;
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
  Exp exp;
  ExpList expL= new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGATION:
    case P_OPEN:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case ID:
      exp = Exp();
                 expL.addElement(exp);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        exp = ExpRest();
                                                         expL.addElement(exp);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    {if (true) return expL;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpRest() throws ParseException {
  Exp  exp;
    jj_consume_token(COMMA);
    exp = Exp();
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(ARRAY_MODIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(P_OPEN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(NEGATION)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(B_OPEN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x48000000,0x400000,0x48000000,0x400000,0x200000,0x50080,0x4000,0x48000000,0x48000000,0x50080,0x50080,0x0,0x800,0x2000,0x80000000,0x240,0x4000,0x80000240,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x800,0x0,0x800,0x0,0x0,0x2800,0x0,0x800,0x800,0x2800,0x2000,0x800,0x1f0,0x0,0xa03,0x4,0x0,0xa07,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[16];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    MiniJavaParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    MiniJavaParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = MiniJavaParserTokenManager.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = MiniJavaParserTokenManager.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = MiniJavaParserTokenManager.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = MiniJavaParserTokenManager.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=MiniJavaParserTokenManager.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
