= Representação Intermediária =

A motivação para a construção de uma árvore de representação intermediária(IR) para o programa é que ela independe de linguagem fonte e da arquitetura de máquina alvo, e ainda torna mais fácil o processo de tradução para código de máquina. 

Para construir a árvore de representação intermediária, percorremos a árvore sintática abstrata usando o padrão Visitor, tal que cada nó da árvore é um objeto Exp que possui uma expressão como atributo. 

As classes do pacote treeIR representam a estrutura de dados que armazena o código intermediário, no nosso caso uma árvore IR. No pacote translate são encontradas as classes necessárias para a tradução do código. Na tradução de código, para cada método definido na árvore sintática, um fragmento de código é gerado com o auxílio de um objeto Frame. O objeto Frame foi necessário para gerar o código do prólogo e epílogo dos fragmentos. 

A maior dificuldade encontrada nessa etapa foi construir a árvore IR gerando os fragmentos utilizando o Frame e entender como mostrar o resultado dessa fase. Contudo, mesmo sob as diversas dificuldades a equipe se reuniu e conseguiu finalizar todos os módulos. 

<div align="center"><a href="http://code.google.com/p/compilador-mini-java/wiki/AnaliseSemantica">preview</a> | <a href="">next</a>
</div>